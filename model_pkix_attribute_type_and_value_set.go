/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PkixAttributeTypeAndValueSET AttributeTypeAndValueSET represents a set of ASN.1 sequences of AttributeTypeAndValue sequences from RFC 2986 (PKCS
type PkixAttributeTypeAndValueSET struct {
	Type []int32 `json:"Type,omitempty"`
	Value [][]PkixAttributeTypeAndValue `json:"Value,omitempty"`
}

// NewPkixAttributeTypeAndValueSET instantiates a new PkixAttributeTypeAndValueSET object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkixAttributeTypeAndValueSET() *PkixAttributeTypeAndValueSET {
	this := PkixAttributeTypeAndValueSET{}
	return &this
}

// NewPkixAttributeTypeAndValueSETWithDefaults instantiates a new PkixAttributeTypeAndValueSET object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkixAttributeTypeAndValueSETWithDefaults() *PkixAttributeTypeAndValueSET {
	this := PkixAttributeTypeAndValueSET{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PkixAttributeTypeAndValueSET) GetType() []int32 {
	if o == nil || o.Type == nil {
		var ret []int32
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixAttributeTypeAndValueSET) GetTypeOk() ([]int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PkixAttributeTypeAndValueSET) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given []int32 and assigns it to the Type field.
func (o *PkixAttributeTypeAndValueSET) SetType(v []int32) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PkixAttributeTypeAndValueSET) GetValue() [][]PkixAttributeTypeAndValue {
	if o == nil || o.Value == nil {
		var ret [][]PkixAttributeTypeAndValue
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkixAttributeTypeAndValueSET) GetValueOk() ([][]PkixAttributeTypeAndValue, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PkixAttributeTypeAndValueSET) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given [][]PkixAttributeTypeAndValue and assigns it to the Value field.
func (o *PkixAttributeTypeAndValueSET) SetValue(v [][]PkixAttributeTypeAndValue) {
	o.Value = v
}

func (o PkixAttributeTypeAndValueSET) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePkixAttributeTypeAndValueSET struct {
	value *PkixAttributeTypeAndValueSET
	isSet bool
}

func (v NullablePkixAttributeTypeAndValueSET) Get() *PkixAttributeTypeAndValueSET {
	return v.value
}

func (v *NullablePkixAttributeTypeAndValueSET) Set(val *PkixAttributeTypeAndValueSET) {
	v.value = val
	v.isSet = true
}

func (v NullablePkixAttributeTypeAndValueSET) IsSet() bool {
	return v.isSet
}

func (v *NullablePkixAttributeTypeAndValueSET) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkixAttributeTypeAndValueSET(val *PkixAttributeTypeAndValueSET) *NullablePkixAttributeTypeAndValueSET {
	return &NullablePkixAttributeTypeAndValueSET{value: val, isSet: true}
}

func (v NullablePkixAttributeTypeAndValueSET) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkixAttributeTypeAndValueSET) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


