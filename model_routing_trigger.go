/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoutingTrigger struct for RoutingTrigger
type RoutingTrigger struct {
	On *string `json:"on,omitempty"`
	Options *RoutingTriggerOptions `json:"options,omitempty"`
	RewriteTo *string `json:"rewrite_to,omitempty"`
}

// NewRoutingTrigger instantiates a new RoutingTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingTrigger() *RoutingTrigger {
	this := RoutingTrigger{}
	return &this
}

// NewRoutingTriggerWithDefaults instantiates a new RoutingTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingTriggerWithDefaults() *RoutingTrigger {
	this := RoutingTrigger{}
	return &this
}

// GetOn returns the On field value if set, zero value otherwise.
func (o *RoutingTrigger) GetOn() string {
	if o == nil || o.On == nil {
		var ret string
		return ret
	}
	return *o.On
}

// GetOnOk returns a tuple with the On field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingTrigger) GetOnOk() (*string, bool) {
	if o == nil || o.On == nil {
		return nil, false
	}
	return o.On, true
}

// HasOn returns a boolean if a field has been set.
func (o *RoutingTrigger) HasOn() bool {
	if o != nil && o.On != nil {
		return true
	}

	return false
}

// SetOn gets a reference to the given string and assigns it to the On field.
func (o *RoutingTrigger) SetOn(v string) {
	o.On = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *RoutingTrigger) GetOptions() RoutingTriggerOptions {
	if o == nil || o.Options == nil {
		var ret RoutingTriggerOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingTrigger) GetOptionsOk() (*RoutingTriggerOptions, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *RoutingTrigger) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given RoutingTriggerOptions and assigns it to the Options field.
func (o *RoutingTrigger) SetOptions(v RoutingTriggerOptions) {
	o.Options = &v
}

// GetRewriteTo returns the RewriteTo field value if set, zero value otherwise.
func (o *RoutingTrigger) GetRewriteTo() string {
	if o == nil || o.RewriteTo == nil {
		var ret string
		return ret
	}
	return *o.RewriteTo
}

// GetRewriteToOk returns a tuple with the RewriteTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingTrigger) GetRewriteToOk() (*string, bool) {
	if o == nil || o.RewriteTo == nil {
		return nil, false
	}
	return o.RewriteTo, true
}

// HasRewriteTo returns a boolean if a field has been set.
func (o *RoutingTrigger) HasRewriteTo() bool {
	if o != nil && o.RewriteTo != nil {
		return true
	}

	return false
}

// SetRewriteTo gets a reference to the given string and assigns it to the RewriteTo field.
func (o *RoutingTrigger) SetRewriteTo(v string) {
	o.RewriteTo = &v
}

func (o RoutingTrigger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.On != nil {
		toSerialize["on"] = o.On
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.RewriteTo != nil {
		toSerialize["rewrite_to"] = o.RewriteTo
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingTrigger struct {
	value *RoutingTrigger
	isSet bool
}

func (v NullableRoutingTrigger) Get() *RoutingTrigger {
	return v.value
}

func (v *NullableRoutingTrigger) Set(val *RoutingTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingTrigger(val *RoutingTrigger) *NullableRoutingTrigger {
	return &NullableRoutingTrigger{value: val, isSet: true}
}

func (v NullableRoutingTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


