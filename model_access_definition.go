/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccessDefinition AccessDefinition defines which versions of an API a key has access to
type AccessDefinition struct {
	AllowedUrls []AccessSpec `json:"allowed_urls,omitempty"`
	ApiId *string `json:"api_id,omitempty"`
	ApiName *string `json:"api_name,omitempty"`
	Limit *APILimit `json:"limit,omitempty"`
	Versions []string `json:"versions,omitempty"`
}

// NewAccessDefinition instantiates a new AccessDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessDefinition() *AccessDefinition {
	this := AccessDefinition{}
	return &this
}

// NewAccessDefinitionWithDefaults instantiates a new AccessDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessDefinitionWithDefaults() *AccessDefinition {
	this := AccessDefinition{}
	return &this
}

// GetAllowedUrls returns the AllowedUrls field value if set, zero value otherwise.
func (o *AccessDefinition) GetAllowedUrls() []AccessSpec {
	if o == nil || o.AllowedUrls == nil {
		var ret []AccessSpec
		return ret
	}
	return o.AllowedUrls
}

// GetAllowedUrlsOk returns a tuple with the AllowedUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDefinition) GetAllowedUrlsOk() ([]AccessSpec, bool) {
	if o == nil || o.AllowedUrls == nil {
		return nil, false
	}
	return o.AllowedUrls, true
}

// HasAllowedUrls returns a boolean if a field has been set.
func (o *AccessDefinition) HasAllowedUrls() bool {
	if o != nil && o.AllowedUrls != nil {
		return true
	}

	return false
}

// SetAllowedUrls gets a reference to the given []AccessSpec and assigns it to the AllowedUrls field.
func (o *AccessDefinition) SetAllowedUrls(v []AccessSpec) {
	o.AllowedUrls = v
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *AccessDefinition) GetApiId() string {
	if o == nil || o.ApiId == nil {
		var ret string
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDefinition) GetApiIdOk() (*string, bool) {
	if o == nil || o.ApiId == nil {
		return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *AccessDefinition) HasApiId() bool {
	if o != nil && o.ApiId != nil {
		return true
	}

	return false
}

// SetApiId gets a reference to the given string and assigns it to the ApiId field.
func (o *AccessDefinition) SetApiId(v string) {
	o.ApiId = &v
}

// GetApiName returns the ApiName field value if set, zero value otherwise.
func (o *AccessDefinition) GetApiName() string {
	if o == nil || o.ApiName == nil {
		var ret string
		return ret
	}
	return *o.ApiName
}

// GetApiNameOk returns a tuple with the ApiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDefinition) GetApiNameOk() (*string, bool) {
	if o == nil || o.ApiName == nil {
		return nil, false
	}
	return o.ApiName, true
}

// HasApiName returns a boolean if a field has been set.
func (o *AccessDefinition) HasApiName() bool {
	if o != nil && o.ApiName != nil {
		return true
	}

	return false
}

// SetApiName gets a reference to the given string and assigns it to the ApiName field.
func (o *AccessDefinition) SetApiName(v string) {
	o.ApiName = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *AccessDefinition) GetLimit() APILimit {
	if o == nil || o.Limit == nil {
		var ret APILimit
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDefinition) GetLimitOk() (*APILimit, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *AccessDefinition) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given APILimit and assigns it to the Limit field.
func (o *AccessDefinition) SetLimit(v APILimit) {
	o.Limit = &v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *AccessDefinition) GetVersions() []string {
	if o == nil || o.Versions == nil {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessDefinition) GetVersionsOk() ([]string, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *AccessDefinition) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *AccessDefinition) SetVersions(v []string) {
	o.Versions = v
}

func (o AccessDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedUrls != nil {
		toSerialize["allowed_urls"] = o.AllowedUrls
	}
	if o.ApiId != nil {
		toSerialize["api_id"] = o.ApiId
	}
	if o.ApiName != nil {
		toSerialize["api_name"] = o.ApiName
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableAccessDefinition struct {
	value *AccessDefinition
	isSet bool
}

func (v NullableAccessDefinition) Get() *AccessDefinition {
	return v.value
}

func (v *NullableAccessDefinition) Set(val *AccessDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessDefinition(val *AccessDefinition) *NullableAccessDefinition {
	return &NullableAccessDefinition{value: val, isSet: true}
}

func (v NullableAccessDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


