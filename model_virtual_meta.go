/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VirtualMeta struct for VirtualMeta
type VirtualMeta struct {
	FunctionSourceType *string `json:"function_source_type,omitempty"`
	FunctionSourceUri *string `json:"function_source_uri,omitempty"`
	Method *string `json:"method,omitempty"`
	Path *string `json:"path,omitempty"`
	ProxyOnError *bool `json:"proxy_on_error,omitempty"`
	ResponseFunctionName *string `json:"response_function_name,omitempty"`
	UseSession *bool `json:"use_session,omitempty"`
}

// NewVirtualMeta instantiates a new VirtualMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualMeta() *VirtualMeta {
	this := VirtualMeta{}
	return &this
}

// NewVirtualMetaWithDefaults instantiates a new VirtualMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualMetaWithDefaults() *VirtualMeta {
	this := VirtualMeta{}
	return &this
}

// GetFunctionSourceType returns the FunctionSourceType field value if set, zero value otherwise.
func (o *VirtualMeta) GetFunctionSourceType() string {
	if o == nil || o.FunctionSourceType == nil {
		var ret string
		return ret
	}
	return *o.FunctionSourceType
}

// GetFunctionSourceTypeOk returns a tuple with the FunctionSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetFunctionSourceTypeOk() (*string, bool) {
	if o == nil || o.FunctionSourceType == nil {
		return nil, false
	}
	return o.FunctionSourceType, true
}

// HasFunctionSourceType returns a boolean if a field has been set.
func (o *VirtualMeta) HasFunctionSourceType() bool {
	if o != nil && o.FunctionSourceType != nil {
		return true
	}

	return false
}

// SetFunctionSourceType gets a reference to the given string and assigns it to the FunctionSourceType field.
func (o *VirtualMeta) SetFunctionSourceType(v string) {
	o.FunctionSourceType = &v
}

// GetFunctionSourceUri returns the FunctionSourceUri field value if set, zero value otherwise.
func (o *VirtualMeta) GetFunctionSourceUri() string {
	if o == nil || o.FunctionSourceUri == nil {
		var ret string
		return ret
	}
	return *o.FunctionSourceUri
}

// GetFunctionSourceUriOk returns a tuple with the FunctionSourceUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetFunctionSourceUriOk() (*string, bool) {
	if o == nil || o.FunctionSourceUri == nil {
		return nil, false
	}
	return o.FunctionSourceUri, true
}

// HasFunctionSourceUri returns a boolean if a field has been set.
func (o *VirtualMeta) HasFunctionSourceUri() bool {
	if o != nil && o.FunctionSourceUri != nil {
		return true
	}

	return false
}

// SetFunctionSourceUri gets a reference to the given string and assigns it to the FunctionSourceUri field.
func (o *VirtualMeta) SetFunctionSourceUri(v string) {
	o.FunctionSourceUri = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *VirtualMeta) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *VirtualMeta) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *VirtualMeta) SetMethod(v string) {
	o.Method = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *VirtualMeta) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *VirtualMeta) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *VirtualMeta) SetPath(v string) {
	o.Path = &v
}

// GetProxyOnError returns the ProxyOnError field value if set, zero value otherwise.
func (o *VirtualMeta) GetProxyOnError() bool {
	if o == nil || o.ProxyOnError == nil {
		var ret bool
		return ret
	}
	return *o.ProxyOnError
}

// GetProxyOnErrorOk returns a tuple with the ProxyOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetProxyOnErrorOk() (*bool, bool) {
	if o == nil || o.ProxyOnError == nil {
		return nil, false
	}
	return o.ProxyOnError, true
}

// HasProxyOnError returns a boolean if a field has been set.
func (o *VirtualMeta) HasProxyOnError() bool {
	if o != nil && o.ProxyOnError != nil {
		return true
	}

	return false
}

// SetProxyOnError gets a reference to the given bool and assigns it to the ProxyOnError field.
func (o *VirtualMeta) SetProxyOnError(v bool) {
	o.ProxyOnError = &v
}

// GetResponseFunctionName returns the ResponseFunctionName field value if set, zero value otherwise.
func (o *VirtualMeta) GetResponseFunctionName() string {
	if o == nil || o.ResponseFunctionName == nil {
		var ret string
		return ret
	}
	return *o.ResponseFunctionName
}

// GetResponseFunctionNameOk returns a tuple with the ResponseFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetResponseFunctionNameOk() (*string, bool) {
	if o == nil || o.ResponseFunctionName == nil {
		return nil, false
	}
	return o.ResponseFunctionName, true
}

// HasResponseFunctionName returns a boolean if a field has been set.
func (o *VirtualMeta) HasResponseFunctionName() bool {
	if o != nil && o.ResponseFunctionName != nil {
		return true
	}

	return false
}

// SetResponseFunctionName gets a reference to the given string and assigns it to the ResponseFunctionName field.
func (o *VirtualMeta) SetResponseFunctionName(v string) {
	o.ResponseFunctionName = &v
}

// GetUseSession returns the UseSession field value if set, zero value otherwise.
func (o *VirtualMeta) GetUseSession() bool {
	if o == nil || o.UseSession == nil {
		var ret bool
		return ret
	}
	return *o.UseSession
}

// GetUseSessionOk returns a tuple with the UseSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMeta) GetUseSessionOk() (*bool, bool) {
	if o == nil || o.UseSession == nil {
		return nil, false
	}
	return o.UseSession, true
}

// HasUseSession returns a boolean if a field has been set.
func (o *VirtualMeta) HasUseSession() bool {
	if o != nil && o.UseSession != nil {
		return true
	}

	return false
}

// SetUseSession gets a reference to the given bool and assigns it to the UseSession field.
func (o *VirtualMeta) SetUseSession(v bool) {
	o.UseSession = &v
}

func (o VirtualMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FunctionSourceType != nil {
		toSerialize["function_source_type"] = o.FunctionSourceType
	}
	if o.FunctionSourceUri != nil {
		toSerialize["function_source_uri"] = o.FunctionSourceUri
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.ProxyOnError != nil {
		toSerialize["proxy_on_error"] = o.ProxyOnError
	}
	if o.ResponseFunctionName != nil {
		toSerialize["response_function_name"] = o.ResponseFunctionName
	}
	if o.UseSession != nil {
		toSerialize["use_session"] = o.UseSession
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualMeta struct {
	value *VirtualMeta
	isSet bool
}

func (v NullableVirtualMeta) Get() *VirtualMeta {
	return v.value
}

func (v *NullableVirtualMeta) Set(val *VirtualMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMeta(val *VirtualMeta) *NullableVirtualMeta {
	return &NullableVirtualMeta{value: val, isSet: true}
}

func (v NullableVirtualMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


