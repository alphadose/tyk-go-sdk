/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SessionState There's a data structure that's based on this and it's used for Protocol Buffer support, make sure to update \"coprocess/proto/coprocess_session_state.proto\" and generate the bindings using: cd coprocess/proto && ./update_bindings.sh
type SessionState struct {
	Tags []string `json:"tags,omitempty"`
	AccessRights *map[string]AccessDefinition `json:"access_rights,omitempty"`
	Alias *string `json:"alias,omitempty"`
	Allowance *float64 `json:"allowance,omitempty"`
	ApplyPolicies []string `json:"apply_policies,omitempty"`
	ApplyPolicyId *string `json:"apply_policy_id,omitempty"`
	BasicAuthData *SessionStateBasicAuthData `json:"basic_auth_data,omitempty"`
	Certificate *string `json:"certificate,omitempty"`
	DataExpires *int64 `json:"data_expires,omitempty"`
	EnableDetailRecording *bool `json:"enable_detail_recording,omitempty"`
	Expires *int64 `json:"expires,omitempty"`
	HmacEnabled *bool `json:"hmac_enabled,omitempty"`
	HmacString *string `json:"hmac_string,omitempty"`
	IdExtractorDeadline *int64 `json:"id_extractor_deadline,omitempty"`
	IsInactive *bool `json:"is_inactive,omitempty"`
	JwtData *SessionStateJwtData `json:"jwt_data,omitempty"`
	LastCheck *int64 `json:"last_check,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	MetaData map[string]map[string]interface{} `json:"meta_data,omitempty"`
	Monitor *SessionStateMonitor `json:"monitor,omitempty"`
	OauthClientId *string `json:"oauth_client_id,omitempty"`
	OauthKeys *map[string]string `json:"oauth_keys,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Per *float64 `json:"per,omitempty"`
	QuotaMax *int64 `json:"quota_max,omitempty"`
	QuotaRemaining *int64 `json:"quota_remaining,omitempty"`
	QuotaRenewalRate *int64 `json:"quota_renewal_rate,omitempty"`
	QuotaRenews *int64 `json:"quota_renews,omitempty"`
	Rate *float64 `json:"rate,omitempty"`
	SessionLifetime *int64 `json:"session_lifetime,omitempty"`
	ThrottleInterval *float64 `json:"throttle_interval,omitempty"`
	ThrottleRetryLimit *int64 `json:"throttle_retry_limit,omitempty"`
}

// NewSessionState instantiates a new SessionState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionState() *SessionState {
	this := SessionState{}
	return &this
}

// NewSessionStateWithDefaults instantiates a new SessionState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionStateWithDefaults() *SessionState {
	this := SessionState{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SessionState) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SessionState) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SessionState) SetTags(v []string) {
	o.Tags = v
}

// GetAccessRights returns the AccessRights field value if set, zero value otherwise.
func (o *SessionState) GetAccessRights() map[string]AccessDefinition {
	if o == nil || o.AccessRights == nil {
		var ret map[string]AccessDefinition
		return ret
	}
	return *o.AccessRights
}

// GetAccessRightsOk returns a tuple with the AccessRights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetAccessRightsOk() (*map[string]AccessDefinition, bool) {
	if o == nil || o.AccessRights == nil {
		return nil, false
	}
	return o.AccessRights, true
}

// HasAccessRights returns a boolean if a field has been set.
func (o *SessionState) HasAccessRights() bool {
	if o != nil && o.AccessRights != nil {
		return true
	}

	return false
}

// SetAccessRights gets a reference to the given map[string]AccessDefinition and assigns it to the AccessRights field.
func (o *SessionState) SetAccessRights(v map[string]AccessDefinition) {
	o.AccessRights = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *SessionState) GetAlias() string {
	if o == nil || o.Alias == nil {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetAliasOk() (*string, bool) {
	if o == nil || o.Alias == nil {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *SessionState) HasAlias() bool {
	if o != nil && o.Alias != nil {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *SessionState) SetAlias(v string) {
	o.Alias = &v
}

// GetAllowance returns the Allowance field value if set, zero value otherwise.
func (o *SessionState) GetAllowance() float64 {
	if o == nil || o.Allowance == nil {
		var ret float64
		return ret
	}
	return *o.Allowance
}

// GetAllowanceOk returns a tuple with the Allowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetAllowanceOk() (*float64, bool) {
	if o == nil || o.Allowance == nil {
		return nil, false
	}
	return o.Allowance, true
}

// HasAllowance returns a boolean if a field has been set.
func (o *SessionState) HasAllowance() bool {
	if o != nil && o.Allowance != nil {
		return true
	}

	return false
}

// SetAllowance gets a reference to the given float64 and assigns it to the Allowance field.
func (o *SessionState) SetAllowance(v float64) {
	o.Allowance = &v
}

// GetApplyPolicies returns the ApplyPolicies field value if set, zero value otherwise.
func (o *SessionState) GetApplyPolicies() []string {
	if o == nil || o.ApplyPolicies == nil {
		var ret []string
		return ret
	}
	return o.ApplyPolicies
}

// GetApplyPoliciesOk returns a tuple with the ApplyPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetApplyPoliciesOk() ([]string, bool) {
	if o == nil || o.ApplyPolicies == nil {
		return nil, false
	}
	return o.ApplyPolicies, true
}

// HasApplyPolicies returns a boolean if a field has been set.
func (o *SessionState) HasApplyPolicies() bool {
	if o != nil && o.ApplyPolicies != nil {
		return true
	}

	return false
}

// SetApplyPolicies gets a reference to the given []string and assigns it to the ApplyPolicies field.
func (o *SessionState) SetApplyPolicies(v []string) {
	o.ApplyPolicies = v
}

// GetApplyPolicyId returns the ApplyPolicyId field value if set, zero value otherwise.
func (o *SessionState) GetApplyPolicyId() string {
	if o == nil || o.ApplyPolicyId == nil {
		var ret string
		return ret
	}
	return *o.ApplyPolicyId
}

// GetApplyPolicyIdOk returns a tuple with the ApplyPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetApplyPolicyIdOk() (*string, bool) {
	if o == nil || o.ApplyPolicyId == nil {
		return nil, false
	}
	return o.ApplyPolicyId, true
}

// HasApplyPolicyId returns a boolean if a field has been set.
func (o *SessionState) HasApplyPolicyId() bool {
	if o != nil && o.ApplyPolicyId != nil {
		return true
	}

	return false
}

// SetApplyPolicyId gets a reference to the given string and assigns it to the ApplyPolicyId field.
func (o *SessionState) SetApplyPolicyId(v string) {
	o.ApplyPolicyId = &v
}

// GetBasicAuthData returns the BasicAuthData field value if set, zero value otherwise.
func (o *SessionState) GetBasicAuthData() SessionStateBasicAuthData {
	if o == nil || o.BasicAuthData == nil {
		var ret SessionStateBasicAuthData
		return ret
	}
	return *o.BasicAuthData
}

// GetBasicAuthDataOk returns a tuple with the BasicAuthData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetBasicAuthDataOk() (*SessionStateBasicAuthData, bool) {
	if o == nil || o.BasicAuthData == nil {
		return nil, false
	}
	return o.BasicAuthData, true
}

// HasBasicAuthData returns a boolean if a field has been set.
func (o *SessionState) HasBasicAuthData() bool {
	if o != nil && o.BasicAuthData != nil {
		return true
	}

	return false
}

// SetBasicAuthData gets a reference to the given SessionStateBasicAuthData and assigns it to the BasicAuthData field.
func (o *SessionState) SetBasicAuthData(v SessionStateBasicAuthData) {
	o.BasicAuthData = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *SessionState) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *SessionState) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *SessionState) SetCertificate(v string) {
	o.Certificate = &v
}

// GetDataExpires returns the DataExpires field value if set, zero value otherwise.
func (o *SessionState) GetDataExpires() int64 {
	if o == nil || o.DataExpires == nil {
		var ret int64
		return ret
	}
	return *o.DataExpires
}

// GetDataExpiresOk returns a tuple with the DataExpires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetDataExpiresOk() (*int64, bool) {
	if o == nil || o.DataExpires == nil {
		return nil, false
	}
	return o.DataExpires, true
}

// HasDataExpires returns a boolean if a field has been set.
func (o *SessionState) HasDataExpires() bool {
	if o != nil && o.DataExpires != nil {
		return true
	}

	return false
}

// SetDataExpires gets a reference to the given int64 and assigns it to the DataExpires field.
func (o *SessionState) SetDataExpires(v int64) {
	o.DataExpires = &v
}

// GetEnableDetailRecording returns the EnableDetailRecording field value if set, zero value otherwise.
func (o *SessionState) GetEnableDetailRecording() bool {
	if o == nil || o.EnableDetailRecording == nil {
		var ret bool
		return ret
	}
	return *o.EnableDetailRecording
}

// GetEnableDetailRecordingOk returns a tuple with the EnableDetailRecording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetEnableDetailRecordingOk() (*bool, bool) {
	if o == nil || o.EnableDetailRecording == nil {
		return nil, false
	}
	return o.EnableDetailRecording, true
}

// HasEnableDetailRecording returns a boolean if a field has been set.
func (o *SessionState) HasEnableDetailRecording() bool {
	if o != nil && o.EnableDetailRecording != nil {
		return true
	}

	return false
}

// SetEnableDetailRecording gets a reference to the given bool and assigns it to the EnableDetailRecording field.
func (o *SessionState) SetEnableDetailRecording(v bool) {
	o.EnableDetailRecording = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *SessionState) GetExpires() int64 {
	if o == nil || o.Expires == nil {
		var ret int64
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetExpiresOk() (*int64, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *SessionState) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given int64 and assigns it to the Expires field.
func (o *SessionState) SetExpires(v int64) {
	o.Expires = &v
}

// GetHmacEnabled returns the HmacEnabled field value if set, zero value otherwise.
func (o *SessionState) GetHmacEnabled() bool {
	if o == nil || o.HmacEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HmacEnabled
}

// GetHmacEnabledOk returns a tuple with the HmacEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetHmacEnabledOk() (*bool, bool) {
	if o == nil || o.HmacEnabled == nil {
		return nil, false
	}
	return o.HmacEnabled, true
}

// HasHmacEnabled returns a boolean if a field has been set.
func (o *SessionState) HasHmacEnabled() bool {
	if o != nil && o.HmacEnabled != nil {
		return true
	}

	return false
}

// SetHmacEnabled gets a reference to the given bool and assigns it to the HmacEnabled field.
func (o *SessionState) SetHmacEnabled(v bool) {
	o.HmacEnabled = &v
}

// GetHmacString returns the HmacString field value if set, zero value otherwise.
func (o *SessionState) GetHmacString() string {
	if o == nil || o.HmacString == nil {
		var ret string
		return ret
	}
	return *o.HmacString
}

// GetHmacStringOk returns a tuple with the HmacString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetHmacStringOk() (*string, bool) {
	if o == nil || o.HmacString == nil {
		return nil, false
	}
	return o.HmacString, true
}

// HasHmacString returns a boolean if a field has been set.
func (o *SessionState) HasHmacString() bool {
	if o != nil && o.HmacString != nil {
		return true
	}

	return false
}

// SetHmacString gets a reference to the given string and assigns it to the HmacString field.
func (o *SessionState) SetHmacString(v string) {
	o.HmacString = &v
}

// GetIdExtractorDeadline returns the IdExtractorDeadline field value if set, zero value otherwise.
func (o *SessionState) GetIdExtractorDeadline() int64 {
	if o == nil || o.IdExtractorDeadline == nil {
		var ret int64
		return ret
	}
	return *o.IdExtractorDeadline
}

// GetIdExtractorDeadlineOk returns a tuple with the IdExtractorDeadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetIdExtractorDeadlineOk() (*int64, bool) {
	if o == nil || o.IdExtractorDeadline == nil {
		return nil, false
	}
	return o.IdExtractorDeadline, true
}

// HasIdExtractorDeadline returns a boolean if a field has been set.
func (o *SessionState) HasIdExtractorDeadline() bool {
	if o != nil && o.IdExtractorDeadline != nil {
		return true
	}

	return false
}

// SetIdExtractorDeadline gets a reference to the given int64 and assigns it to the IdExtractorDeadline field.
func (o *SessionState) SetIdExtractorDeadline(v int64) {
	o.IdExtractorDeadline = &v
}

// GetIsInactive returns the IsInactive field value if set, zero value otherwise.
func (o *SessionState) GetIsInactive() bool {
	if o == nil || o.IsInactive == nil {
		var ret bool
		return ret
	}
	return *o.IsInactive
}

// GetIsInactiveOk returns a tuple with the IsInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetIsInactiveOk() (*bool, bool) {
	if o == nil || o.IsInactive == nil {
		return nil, false
	}
	return o.IsInactive, true
}

// HasIsInactive returns a boolean if a field has been set.
func (o *SessionState) HasIsInactive() bool {
	if o != nil && o.IsInactive != nil {
		return true
	}

	return false
}

// SetIsInactive gets a reference to the given bool and assigns it to the IsInactive field.
func (o *SessionState) SetIsInactive(v bool) {
	o.IsInactive = &v
}

// GetJwtData returns the JwtData field value if set, zero value otherwise.
func (o *SessionState) GetJwtData() SessionStateJwtData {
	if o == nil || o.JwtData == nil {
		var ret SessionStateJwtData
		return ret
	}
	return *o.JwtData
}

// GetJwtDataOk returns a tuple with the JwtData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetJwtDataOk() (*SessionStateJwtData, bool) {
	if o == nil || o.JwtData == nil {
		return nil, false
	}
	return o.JwtData, true
}

// HasJwtData returns a boolean if a field has been set.
func (o *SessionState) HasJwtData() bool {
	if o != nil && o.JwtData != nil {
		return true
	}

	return false
}

// SetJwtData gets a reference to the given SessionStateJwtData and assigns it to the JwtData field.
func (o *SessionState) SetJwtData(v SessionStateJwtData) {
	o.JwtData = &v
}

// GetLastCheck returns the LastCheck field value if set, zero value otherwise.
func (o *SessionState) GetLastCheck() int64 {
	if o == nil || o.LastCheck == nil {
		var ret int64
		return ret
	}
	return *o.LastCheck
}

// GetLastCheckOk returns a tuple with the LastCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetLastCheckOk() (*int64, bool) {
	if o == nil || o.LastCheck == nil {
		return nil, false
	}
	return o.LastCheck, true
}

// HasLastCheck returns a boolean if a field has been set.
func (o *SessionState) HasLastCheck() bool {
	if o != nil && o.LastCheck != nil {
		return true
	}

	return false
}

// SetLastCheck gets a reference to the given int64 and assigns it to the LastCheck field.
func (o *SessionState) SetLastCheck(v int64) {
	o.LastCheck = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SessionState) GetLastUpdated() string {
	if o == nil || o.LastUpdated == nil {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetLastUpdatedOk() (*string, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SessionState) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *SessionState) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *SessionState) GetMetaData() map[string]map[string]interface{} {
	if o == nil || o.MetaData == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetMetaDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *SessionState) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given map[string]map[string]interface{} and assigns it to the MetaData field.
func (o *SessionState) SetMetaData(v map[string]map[string]interface{}) {
	o.MetaData = v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *SessionState) GetMonitor() SessionStateMonitor {
	if o == nil || o.Monitor == nil {
		var ret SessionStateMonitor
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetMonitorOk() (*SessionStateMonitor, bool) {
	if o == nil || o.Monitor == nil {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *SessionState) HasMonitor() bool {
	if o != nil && o.Monitor != nil {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given SessionStateMonitor and assigns it to the Monitor field.
func (o *SessionState) SetMonitor(v SessionStateMonitor) {
	o.Monitor = &v
}

// GetOauthClientId returns the OauthClientId field value if set, zero value otherwise.
func (o *SessionState) GetOauthClientId() string {
	if o == nil || o.OauthClientId == nil {
		var ret string
		return ret
	}
	return *o.OauthClientId
}

// GetOauthClientIdOk returns a tuple with the OauthClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetOauthClientIdOk() (*string, bool) {
	if o == nil || o.OauthClientId == nil {
		return nil, false
	}
	return o.OauthClientId, true
}

// HasOauthClientId returns a boolean if a field has been set.
func (o *SessionState) HasOauthClientId() bool {
	if o != nil && o.OauthClientId != nil {
		return true
	}

	return false
}

// SetOauthClientId gets a reference to the given string and assigns it to the OauthClientId field.
func (o *SessionState) SetOauthClientId(v string) {
	o.OauthClientId = &v
}

// GetOauthKeys returns the OauthKeys field value if set, zero value otherwise.
func (o *SessionState) GetOauthKeys() map[string]string {
	if o == nil || o.OauthKeys == nil {
		var ret map[string]string
		return ret
	}
	return *o.OauthKeys
}

// GetOauthKeysOk returns a tuple with the OauthKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetOauthKeysOk() (*map[string]string, bool) {
	if o == nil || o.OauthKeys == nil {
		return nil, false
	}
	return o.OauthKeys, true
}

// HasOauthKeys returns a boolean if a field has been set.
func (o *SessionState) HasOauthKeys() bool {
	if o != nil && o.OauthKeys != nil {
		return true
	}

	return false
}

// SetOauthKeys gets a reference to the given map[string]string and assigns it to the OauthKeys field.
func (o *SessionState) SetOauthKeys(v map[string]string) {
	o.OauthKeys = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *SessionState) GetOrgId() string {
	if o == nil || o.OrgId == nil {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetOrgIdOk() (*string, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *SessionState) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *SessionState) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *SessionState) GetPer() float64 {
	if o == nil || o.Per == nil {
		var ret float64
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetPerOk() (*float64, bool) {
	if o == nil || o.Per == nil {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *SessionState) HasPer() bool {
	if o != nil && o.Per != nil {
		return true
	}

	return false
}

// SetPer gets a reference to the given float64 and assigns it to the Per field.
func (o *SessionState) SetPer(v float64) {
	o.Per = &v
}

// GetQuotaMax returns the QuotaMax field value if set, zero value otherwise.
func (o *SessionState) GetQuotaMax() int64 {
	if o == nil || o.QuotaMax == nil {
		var ret int64
		return ret
	}
	return *o.QuotaMax
}

// GetQuotaMaxOk returns a tuple with the QuotaMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaMaxOk() (*int64, bool) {
	if o == nil || o.QuotaMax == nil {
		return nil, false
	}
	return o.QuotaMax, true
}

// HasQuotaMax returns a boolean if a field has been set.
func (o *SessionState) HasQuotaMax() bool {
	if o != nil && o.QuotaMax != nil {
		return true
	}

	return false
}

// SetQuotaMax gets a reference to the given int64 and assigns it to the QuotaMax field.
func (o *SessionState) SetQuotaMax(v int64) {
	o.QuotaMax = &v
}

// GetQuotaRemaining returns the QuotaRemaining field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRemaining() int64 {
	if o == nil || o.QuotaRemaining == nil {
		var ret int64
		return ret
	}
	return *o.QuotaRemaining
}

// GetQuotaRemainingOk returns a tuple with the QuotaRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRemainingOk() (*int64, bool) {
	if o == nil || o.QuotaRemaining == nil {
		return nil, false
	}
	return o.QuotaRemaining, true
}

// HasQuotaRemaining returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRemaining() bool {
	if o != nil && o.QuotaRemaining != nil {
		return true
	}

	return false
}

// SetQuotaRemaining gets a reference to the given int64 and assigns it to the QuotaRemaining field.
func (o *SessionState) SetQuotaRemaining(v int64) {
	o.QuotaRemaining = &v
}

// GetQuotaRenewalRate returns the QuotaRenewalRate field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRenewalRate() int64 {
	if o == nil || o.QuotaRenewalRate == nil {
		var ret int64
		return ret
	}
	return *o.QuotaRenewalRate
}

// GetQuotaRenewalRateOk returns a tuple with the QuotaRenewalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRenewalRateOk() (*int64, bool) {
	if o == nil || o.QuotaRenewalRate == nil {
		return nil, false
	}
	return o.QuotaRenewalRate, true
}

// HasQuotaRenewalRate returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRenewalRate() bool {
	if o != nil && o.QuotaRenewalRate != nil {
		return true
	}

	return false
}

// SetQuotaRenewalRate gets a reference to the given int64 and assigns it to the QuotaRenewalRate field.
func (o *SessionState) SetQuotaRenewalRate(v int64) {
	o.QuotaRenewalRate = &v
}

// GetQuotaRenews returns the QuotaRenews field value if set, zero value otherwise.
func (o *SessionState) GetQuotaRenews() int64 {
	if o == nil || o.QuotaRenews == nil {
		var ret int64
		return ret
	}
	return *o.QuotaRenews
}

// GetQuotaRenewsOk returns a tuple with the QuotaRenews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetQuotaRenewsOk() (*int64, bool) {
	if o == nil || o.QuotaRenews == nil {
		return nil, false
	}
	return o.QuotaRenews, true
}

// HasQuotaRenews returns a boolean if a field has been set.
func (o *SessionState) HasQuotaRenews() bool {
	if o != nil && o.QuotaRenews != nil {
		return true
	}

	return false
}

// SetQuotaRenews gets a reference to the given int64 and assigns it to the QuotaRenews field.
func (o *SessionState) SetQuotaRenews(v int64) {
	o.QuotaRenews = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *SessionState) GetRate() float64 {
	if o == nil || o.Rate == nil {
		var ret float64
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetRateOk() (*float64, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *SessionState) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given float64 and assigns it to the Rate field.
func (o *SessionState) SetRate(v float64) {
	o.Rate = &v
}

// GetSessionLifetime returns the SessionLifetime field value if set, zero value otherwise.
func (o *SessionState) GetSessionLifetime() int64 {
	if o == nil || o.SessionLifetime == nil {
		var ret int64
		return ret
	}
	return *o.SessionLifetime
}

// GetSessionLifetimeOk returns a tuple with the SessionLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetSessionLifetimeOk() (*int64, bool) {
	if o == nil || o.SessionLifetime == nil {
		return nil, false
	}
	return o.SessionLifetime, true
}

// HasSessionLifetime returns a boolean if a field has been set.
func (o *SessionState) HasSessionLifetime() bool {
	if o != nil && o.SessionLifetime != nil {
		return true
	}

	return false
}

// SetSessionLifetime gets a reference to the given int64 and assigns it to the SessionLifetime field.
func (o *SessionState) SetSessionLifetime(v int64) {
	o.SessionLifetime = &v
}

// GetThrottleInterval returns the ThrottleInterval field value if set, zero value otherwise.
func (o *SessionState) GetThrottleInterval() float64 {
	if o == nil || o.ThrottleInterval == nil {
		var ret float64
		return ret
	}
	return *o.ThrottleInterval
}

// GetThrottleIntervalOk returns a tuple with the ThrottleInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetThrottleIntervalOk() (*float64, bool) {
	if o == nil || o.ThrottleInterval == nil {
		return nil, false
	}
	return o.ThrottleInterval, true
}

// HasThrottleInterval returns a boolean if a field has been set.
func (o *SessionState) HasThrottleInterval() bool {
	if o != nil && o.ThrottleInterval != nil {
		return true
	}

	return false
}

// SetThrottleInterval gets a reference to the given float64 and assigns it to the ThrottleInterval field.
func (o *SessionState) SetThrottleInterval(v float64) {
	o.ThrottleInterval = &v
}

// GetThrottleRetryLimit returns the ThrottleRetryLimit field value if set, zero value otherwise.
func (o *SessionState) GetThrottleRetryLimit() int64 {
	if o == nil || o.ThrottleRetryLimit == nil {
		var ret int64
		return ret
	}
	return *o.ThrottleRetryLimit
}

// GetThrottleRetryLimitOk returns a tuple with the ThrottleRetryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionState) GetThrottleRetryLimitOk() (*int64, bool) {
	if o == nil || o.ThrottleRetryLimit == nil {
		return nil, false
	}
	return o.ThrottleRetryLimit, true
}

// HasThrottleRetryLimit returns a boolean if a field has been set.
func (o *SessionState) HasThrottleRetryLimit() bool {
	if o != nil && o.ThrottleRetryLimit != nil {
		return true
	}

	return false
}

// SetThrottleRetryLimit gets a reference to the given int64 and assigns it to the ThrottleRetryLimit field.
func (o *SessionState) SetThrottleRetryLimit(v int64) {
	o.ThrottleRetryLimit = &v
}

func (o SessionState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.AccessRights != nil {
		toSerialize["access_rights"] = o.AccessRights
	}
	if o.Alias != nil {
		toSerialize["alias"] = o.Alias
	}
	if o.Allowance != nil {
		toSerialize["allowance"] = o.Allowance
	}
	if o.ApplyPolicies != nil {
		toSerialize["apply_policies"] = o.ApplyPolicies
	}
	if o.ApplyPolicyId != nil {
		toSerialize["apply_policy_id"] = o.ApplyPolicyId
	}
	if o.BasicAuthData != nil {
		toSerialize["basic_auth_data"] = o.BasicAuthData
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.DataExpires != nil {
		toSerialize["data_expires"] = o.DataExpires
	}
	if o.EnableDetailRecording != nil {
		toSerialize["enable_detail_recording"] = o.EnableDetailRecording
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.HmacEnabled != nil {
		toSerialize["hmac_enabled"] = o.HmacEnabled
	}
	if o.HmacString != nil {
		toSerialize["hmac_string"] = o.HmacString
	}
	if o.IdExtractorDeadline != nil {
		toSerialize["id_extractor_deadline"] = o.IdExtractorDeadline
	}
	if o.IsInactive != nil {
		toSerialize["is_inactive"] = o.IsInactive
	}
	if o.JwtData != nil {
		toSerialize["jwt_data"] = o.JwtData
	}
	if o.LastCheck != nil {
		toSerialize["last_check"] = o.LastCheck
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.MetaData != nil {
		toSerialize["meta_data"] = o.MetaData
	}
	if o.Monitor != nil {
		toSerialize["monitor"] = o.Monitor
	}
	if o.OauthClientId != nil {
		toSerialize["oauth_client_id"] = o.OauthClientId
	}
	if o.OauthKeys != nil {
		toSerialize["oauth_keys"] = o.OauthKeys
	}
	if o.OrgId != nil {
		toSerialize["org_id"] = o.OrgId
	}
	if o.Per != nil {
		toSerialize["per"] = o.Per
	}
	if o.QuotaMax != nil {
		toSerialize["quota_max"] = o.QuotaMax
	}
	if o.QuotaRemaining != nil {
		toSerialize["quota_remaining"] = o.QuotaRemaining
	}
	if o.QuotaRenewalRate != nil {
		toSerialize["quota_renewal_rate"] = o.QuotaRenewalRate
	}
	if o.QuotaRenews != nil {
		toSerialize["quota_renews"] = o.QuotaRenews
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.SessionLifetime != nil {
		toSerialize["session_lifetime"] = o.SessionLifetime
	}
	if o.ThrottleInterval != nil {
		toSerialize["throttle_interval"] = o.ThrottleInterval
	}
	if o.ThrottleRetryLimit != nil {
		toSerialize["throttle_retry_limit"] = o.ThrottleRetryLimit
	}
	return json.Marshal(toSerialize)
}

type NullableSessionState struct {
	value *SessionState
	isSet bool
}

func (v NullableSessionState) Get() *SessionState {
	return v.value
}

func (v *NullableSessionState) Set(val *SessionState) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionState) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionState(val *SessionState) *NullableSessionState {
	return &NullableSessionState{value: val, isSet: true}
}

func (v NullableSessionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


