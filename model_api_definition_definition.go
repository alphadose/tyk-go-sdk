/*
Tyk Gateway API

The Tyk Gateway API is the primary means for integrating your application with the Tyk API Gateway system. This API is very small, and has no granular permissions system. It is intended to be used purely for internal automation and integration.  **Warning: Under no circumstances should outside parties be granted access to this API.**  The Tyk Gateway API is capable of:  * Managing session objects (key generation) * Managing and listing policies * Managing and listing API Definitions (only when not using the Dashboard) * Hot reloads / reloading a cluster configuration * OAuth client creation (only when not using the Dashboard)   In order to use the Gateway API, you'll need to set the `secret` parameter in your tyk.conf file.  The shared secret you set should then be sent along as a header with each Gateway API Request in order for it to be successful:  ``` x-tyk-authorization: <your-secret> ``` <br/> <b>The Tyk Gateway API is subsumed by the Tyk Dashboard API in Pro installations.</b>

API version: 3.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// APIDefinitionDefinition struct for APIDefinitionDefinition
type APIDefinitionDefinition struct {
	Key *string `json:"key,omitempty"`
	Location *string `json:"location,omitempty"`
	StripPath *bool `json:"strip_path,omitempty"`
}

// NewAPIDefinitionDefinition instantiates a new APIDefinitionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIDefinitionDefinition() *APIDefinitionDefinition {
	this := APIDefinitionDefinition{}
	return &this
}

// NewAPIDefinitionDefinitionWithDefaults instantiates a new APIDefinitionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIDefinitionDefinitionWithDefaults() *APIDefinitionDefinition {
	this := APIDefinitionDefinition{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *APIDefinitionDefinition) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDefinitionDefinition) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *APIDefinitionDefinition) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *APIDefinitionDefinition) SetKey(v string) {
	o.Key = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *APIDefinitionDefinition) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDefinitionDefinition) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *APIDefinitionDefinition) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *APIDefinitionDefinition) SetLocation(v string) {
	o.Location = &v
}

// GetStripPath returns the StripPath field value if set, zero value otherwise.
func (o *APIDefinitionDefinition) GetStripPath() bool {
	if o == nil || o.StripPath == nil {
		var ret bool
		return ret
	}
	return *o.StripPath
}

// GetStripPathOk returns a tuple with the StripPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIDefinitionDefinition) GetStripPathOk() (*bool, bool) {
	if o == nil || o.StripPath == nil {
		return nil, false
	}
	return o.StripPath, true
}

// HasStripPath returns a boolean if a field has been set.
func (o *APIDefinitionDefinition) HasStripPath() bool {
	if o != nil && o.StripPath != nil {
		return true
	}

	return false
}

// SetStripPath gets a reference to the given bool and assigns it to the StripPath field.
func (o *APIDefinitionDefinition) SetStripPath(v bool) {
	o.StripPath = &v
}

func (o APIDefinitionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.StripPath != nil {
		toSerialize["strip_path"] = o.StripPath
	}
	return json.Marshal(toSerialize)
}

type NullableAPIDefinitionDefinition struct {
	value *APIDefinitionDefinition
	isSet bool
}

func (v NullableAPIDefinitionDefinition) Get() *APIDefinitionDefinition {
	return v.value
}

func (v *NullableAPIDefinitionDefinition) Set(val *APIDefinitionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIDefinitionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIDefinitionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIDefinitionDefinition(val *APIDefinitionDefinition) *NullableAPIDefinitionDefinition {
	return &NullableAPIDefinitionDefinition{value: val, isSet: true}
}

func (v NullableAPIDefinitionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIDefinitionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


